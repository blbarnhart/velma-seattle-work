out2 = read.csv('temp2.csv')
head(out1)
a = merge(out1,out2,by="Substance")
head(a)
rm(list=ls())
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=15,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","MinBeginDate","MaxEndDate","NumSamples","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
rm(list=ls())
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=15,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","NumSamples","NumNonDetects","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
#output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumNonDetects[count] = 0
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
rm(list=ls())
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=14,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","NumSamples","NumNonDetects","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
#output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumNonDetects[count] = 0
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
rm(list=ls())
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=14,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","NumSamples","NumNonDetects","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$Mean[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
#output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumNonDetects[count] = 0
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
rm(list=ls())
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=14,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","NumSamples","NumNonDetects","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$Mean[count] = ""
#output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
#output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumNonDetects[count] = 0
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
write.table(output_limits,"../../outputs/limits_output.csv",quote=F,row.names=F,sep='\t')
write.table(output_limits,"../../outputs/limits_output.csv",quote=F,row.names=F,sep='\t')
out = read.csv('../../outputs/DRAFT_NCASI_Concentrations_Data_2020-02-03.csv')
rm(list=ls())
out = read.csv('../../outputs/DRAFT_NCASI_Concentrations_Data_2020-02-03.csv')
head(out)
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=14,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","NumSamples","NumNonDetects","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$Mean[count] = ""
#output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
#output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumNonDetects[count] = 0
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
out = read.csv('../../outputs/DRAFT_NCASI_Concentrations_Data_2020-02-03.csv')
limits = output_limits
ls()
rm(b,count,output,output_limits,p,parameters,sub)
ls()
head(out)
head(limits)
write.csv(output_limits,"../../outputs/limits.csv",quote=F,row.names=F)
write.csv(limits,"../../outputs/limits.csv",quote=F,row.names=F)
limits = read.csv('../../outputs/limits.csv')
ls()
rm(list=ls())
setwd("C:/Users/bbarnhart.DOMAIN1/OneDrive - National Council for Air and Stream Improvement Inc/Projects/Technical Studies Projects/Risk/assessRisk_ver1/inputs/dmrinputs")
sub = read.csv("limits.csv")
output = data.frame(matrix(ncol=14,nrow=300))
names(output) <- c("Substance","Source","Statbase","Min","25%","50%","75%","90%","99%","Max","Mean","NumSamples","NumNonDetects","NumMills")
#Pre-processing.
#   only active
sub = sub[sub$Status == "Active",]
sub = sub[sub$Units == "mg/L",]
sub = sub[sub$Process.Outfall. == "TRUE",]
#   only external outfall
sub = sub[sub$Permit.Feature.Type == "External Outfall",]
#   only effluent gross
#sub = sub[sub$Monitoring.Location == "Effluent Gross",]
#Loop through parameters (substances)
parameters = unique(sub$Parameter)
count = 1
for (p in parameters) {
subparam = sub[sub$Parameter == p,]
statbases = unique(subparam$Statistical.Base)
for (b in statbases) {
subparamstat = subparam[subparam$Statistical.Base == b,]
output$Substance[count] = as.character(p)
output$Source[count] = "DMR_LIMITS"
output$Statbase[count] = as.character(b)
output$'Min'[count] = min(subparamstat$Limit.Value,na.rm=TRUE)
output$'25%'[count] = ""
output$'50%'[count] = ""
output$'75%'[count] = ""
output$'90%'[count] = ""
output$'99%'[count] = ""
output$`Max`[count] = quantile(subparamstat$Limit.Value,1.0,na.rm=TRUE)
output$Mean[count] = ""
#output$'Mean'[count] = mean(subparamstat$Limit.Value,na.rm=TRUE)
#output$MinBeginDate[count] = format(min(as.Date(as.character(subparamstat$Limit.Begin.Date),"%d-%b-%y")),"%Y")
#output$MaxEndDate[count] = format(max(as.Date(as.character(subparamstat$Limit.End.Date),"%d-%b-%y")),'%Y')
output$NumSamples[count] = length(subparamstat$Limit.Value[!is.na(subparamstat$Limit.Value)])
output$NumNonDetects[count] = 0
output$NumMills[count] = length(unique(subparamstat$NPDES.Permit.Number))
count = count + 1
rm(subparamstat)
}
rm(statbases)
}
rm(subparam)
output_limits = na.omit(output)
head(output_limits)
out = read.csv('../../outputs/DRAFT_NCASI_Concentrations_Data_2020-02-03.csv')
limits = output_limits
rm(b,count,output,output_limits,p,parameters,sub)
head(out)
head(limits)
out$LimitSource = NA
out$LimitMin = NA
out$LimitMax = NA
out$LimitNumSamples = NA
out$LimitNumMills = NA
out$LimitSource[out$Substance == limits$Substance] = limits$Source
out$Substance == limits$Substance
out$LimitSource[out$Substance == limits$Substance] = limits$Source
head(out)
head(out,100)
head(out,200)
head(out,300)
out$LimitSource
out$Substance
limits$Substance
out$LimitSource
for (j in 1:length(limits$Substance)) {
for (i in 1:length(out$Substance)) {
if (limits$Substance[j] == out$Substance[i]) out$LimitSource[i] = limits$Source[j]
if (limits$Substance[j] == out$Substance[i]) out$LimitMin[i] = limits$Min[j]
if (limits$Substance[j] == out$Substance[i]) out$LimitMax[i] = limits$Max[j]
if (limits$Substance[j] == out$Substance[i]) out$LimitNumSamples[i] = limits$NumSamples[j]
if (limits$Substance[j] == out$Substance[i]) out$LimitNumMills[i] = limits$NumMills[j]
}
}
head(out)
write.table(out,'../../outputs/outputsfinal.csv',quote=F,row.names=F,sep='\t')
###### Auto-risk portion
rm(list=ls())
out = read.csv('../../outputs/values_only.csv')
head(out)
###### Auto-risk portion
rm(list=ls())
out = read.csv('../../outputs/values_only.csv')
head(out)
for (i in 1:length(out$Min)) {
if(out$X0.9[i]>out$LimitMin[i]) out$Auto.Risk.DMR[i] = "Risk"
if(out$X0.9[i]>out$EPA.HHWQC[i]) out$Auto.Risk.HHWQC = "Risk"
}
for (i in 1:length(out$Min)) {
if(out$X0.9[i]>out$LimitMin[i]) out$Auto.Risk.DMR[i] = "Risk"
if(out$X0.9[i]>out$EPA.HHWQC[i]) out$Auto.Risk.HHWQC[i] = "Risk"
}
for (i in 1:length(out$Min)) {
if (out$X0.9[i]>out$LimitMin[i]) out$Auto.Risk.DMR[i] = "Risk"
if (out$X0.9[i]>out$EPA.HHWQC[i]) out$Auto.Risk.HHWQC[i] = "Risk"
}
i
out$X0.9[1]
out$LimitMin[i]
for (i in 1:length(out$Min)) {
if (!is.na(out$LimitMin[i]) & out$X0.9[i]>out$LimitMin[i]) out$Auto.Risk.DMR[i] = "Risk"
if (!is.na(out$EPA.HHWQC) & out$X0.9[i]>out$EPA.HHWQC[i]) out$Auto.Risk.HHWQC[i] = "Risk"
}
warnings()
i
i = 1
head(out)
for (i in 1:length(out$Min)) {
if (!is.na(out$LimitMin[i]) & out$X0.9[i]>out$LimitMin[i]) {
out$Auto.Risk.DMR[i] = "Y" }
else { out$Auto.Risk.DMR[i] = "N"
}
if (!is.na(out$EPA.HHWQC) & out$X0.9[i]>out$EPA.HHWQC[i]) {
out$Auto.Risk.HHWQC[i] = "Y" }
else { out$Auto.Risk.HHWQC[i] = "N"
}
}
head(out)
write.csv(out,vals_only_risk.csv,quote=F,row.names=F)
write.csv(out,'vals_only_risk.csv',quote=F,row.names=F)
getwd()
rm(list=ls())
out = read.csv('../../outputs/values_only.csv')
head(out)
for (i in 1:length(out$Min)) {
if (!is.na(out$LimitMin[i]) & out$X0.9[i]>out$LimitMin[i]) {
out$Auto.Risk.DMR[i] = "Y" }
else if (is.na(out$LimitMin[i])) {
out$Auto.Risk.DMR[i] = ""
}
else { out$Auto.Risk.DMR[i] = "N"
}
if (!is.na(out$EPA.HHWQC) & out$X0.9[i]>out$EPA.HHWQC[i]) {
out$Auto.Risk.HHWQC[i] = "Y" }
else if (is.na(out$EPA.HHWQC)) {
out$Auto.Risk.HHWQC[i] = ""
}
else { out$Auto.Risk.HHWQC[i] = "N"
}
}
write.csv(out,'../../outputs/vals_only_risk.csv',quote=F,row.names=F)
rm(list=ls())
out = read.csv('../../outputs/values_only.csv')
head(out)
for (i in 1:length(out$Min)) {
if (is.na(out$LimitMin[i])) {
out$Auto.Risk.DMR[i] = ""
}
else if (out$X0.9[i]>out$LimitMin[i]) {
out$Auto.Risk.DMR[i] = "Y"
}
else {
out$Auto.Risk.DMR[i] = "N"
}
if (is.na(out$EPA.HHWQC[i])) {
out$Auto.Risk.HHWQC[i] = "" }
else if (out$X0.9[i]>out$EPA.HHWQC[i])) {
out$Auto.Risk.HHWQC[i] = "Y"
}
else {
out$Auto.Risk.HHWQC[i] = "N"
}
}
rm(list=ls())
out = read.csv('../../outputs/values_only.csv')
head(out)
for (i in 1:length(out$Min)) {
if (is.na(out$LimitMin[i])) {
out$Auto.Risk.DMR[i] = ""
}
else if (out$X0.9[i]>out$LimitMin[i]) {
out$Auto.Risk.DMR[i] = "Y"
}
else {
out$Auto.Risk.DMR[i] = "N"
}
if (is.na(out$EPA.HHWQC[i])) {
out$Auto.Risk.HHWQC[i] = "" }
else if (out$X0.9[i]>out$EPA.HHWQC[i]) {
out$Auto.Risk.HHWQC[i] = "Y"
}
else {
out$Auto.Risk.HHWQC[i] = "N"
}
}
write.csv(out,'../../outputs/vals_only_risk.csv',quote=F,row.names=F)
write.csv(out,'../../outputs/vals_only_risk.csv',quote=F,row.names=F)
setwd("E:/velma-seattle-work/results")
setwd("E:/velma-seattle-work/results")
lon = read.csv('results_longfellow.csv')
tay = read.csv('results_taylor.csv')
tho = read.csv('results_thornton.csv')
pip = read.csv('results_pipers.csv')
head(lon)
boxplot(lon)
boxplot(lon[-1,])
boxplot(lon[,-1])
par(mfrow=c(2,2))
boxplot(lon[,-1])
boxplot(tay[,-1])
boxplot(tho[,-1])
boxplot(pip[,-1])
boxplot(lon[,-1]+tay[,-1])
boxplot(lon[,-1],tay[,-1])
boxplot(lon[,-1],tay[,-1])
boxplot(lon[,-1])
par(mfrow=c(2,2))
boxplot(lon[,-1])
boxplot(tay[,-1])
boxplot(tho[,-1])
boxplot(pip[,-1])
